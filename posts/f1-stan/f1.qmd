---
title: "Latent F1 team and driver performance: fun with Bayesian models"
author: "Chris Bowdon"
date: "2024-12-27"
categories: [bayesian, r, f1]
warning: false
freeze: false
code-fold: true
---

For a bit of fun, let's try and model the performance of F1 drivers and constructors in the 2024 season using Bayesian models. The aim is to more to learn about using [Stan](https://mc-stan.org) than determine deep truths about F1, since there's far more to performance than we can easily model.

We'll vaguely imitate the [f1-metrics](https://f1metrics.wordpress.com) model, which I used to eagerly await after each season. In this model there are latent variables of driver skill and car quality, which predict points/positions. However I never did get hold of the paper for that, and am instead following the amazing [Rasmus Bååth's blog](https://www.sumsar.net/blog/2013/07/modeling-match-results-in-la-liga-part-one/) where he models the latent skill of football teams in La Liga.

I gathered CSVs of race data from the fantastic [Ergast](https://ergast.com/mrd/). The weapon of choice is R and the tidyverse, since nothing else is quite so ergonomic for this type of analysis. You can find the code behind the folds if you want to play along.

```{r}
#| label: data-loading
#| warning: false
library(tidyverse)
library(knitr) # this lib is for rendering tables nicely

qualifying <- read_csv("data/qualifying.csv") |> rename(quali_position = position)
races <- read_csv("data/races.csv") |>
  select(raceId, year, round, circuitId, name) |>
  rename(gp = name)
results <- read_csv("data/results.csv") |> select(resultId, raceId, driverId, constructorId, grid, position, points, milliseconds)
constructors <- read_csv("data/constructors.csv") |> select(constructorId, constructorRef)
drivers <- read_csv("data/drivers.csv") |> select(driverId, driverRef)
circuits <- read_csv("data/circuits.csv") |> select(circuitId, circuitRef)

ctr_drvs <- tribble(
  ~constructorRef, ~driverRef,
  "alpine", "doohan",
  "alpine", "gasly",
  "alpine", "ocon",
  "aston_martin", "alonso",
  "aston_martin", "stroll",
  "ferrari", "bearman",
  "ferrari", "leclerc",
  "ferrari", "sainz",
  "haas", "bearman",
  "haas", "hulkenberg",
  "haas", "kevin_magnussen",
  "mclaren", "norris",
  "mclaren", "piastri",
  "mercedes", "hamilton",
  "mercedes", "russell",
  "rb", "lawson",
  "rb", "ricciardo",
  "rb", "tsunoda",
  "red_bull", "max_verstappen",
  "red_bull", "perez",
  "sauber", "bottas",
  "sauber", "zhou",
  "williams", "albon",
  "williams", "colapinto",
  "williams", "sargeant",
)

ctr_colours <- tribble(
  ~constructorRef, ~colour,
  "red_bull", "#3671c6",
  "mercedes", "#26f5d2",
  "ferrari", "#e80220",
  "mclaren", "#ff8001",
  "aston_martin", "#229971",
  "alpine", "#F363B9", # Should be "#0093cc" but there's too much blue
  "williams", "#63c4ff",
  "rb", "#6592ff",
  "sauber", "#52e252",
  "haas", "#b6babd"
) |>
  arrange(constructorRef)

drv_colours <- ctr_colours |>
  merge(ctr_drvs) |>
  group_by(driverRef) |>
  arrange(constructorRef) |>
  slice_head(n = 1) |> # alphabetical first for multi-team drivers i.e. Bearman
  select(driverRef, colour) |>
  arrange(driverRef)

f1data <- races |>
  merge(results) |>
  merge(qualifying) |>
  merge(constructors) |>
  merge(drivers) |>
  merge(circuits) |>
  select(raceId, gp, year, round, circuitRef, constructorRef, driverRef, q1, q2, q3, quali_position, grid, position) |>
  mutate(position = ifelse(position == "\\N", NA, as.numeric(position)))
```

In the interests of being educational - and because Lord knows I hate editing - I am writing this post as I go, including any blind-alleys and debugging.

Let's start with some visualisations of the data we have.

```{r}
#| label: fig-data-2024
#| fig-cap: Histograms of driver performance in F1 2024.
f2024 <- f1data |> filter(year == 2024)

ggplot(f2024) +
  aes(x = position, fill = driverRef) +
  facet_wrap(~driverRef) +
  scale_fill_manual(values = drv_colours$colour) +
  geom_histogram(alpha = 0.5, colour = "black", linewidth = 0.1, binwidth = 1, show.legend = FALSE)
```

The model goes like this. Points are simulated as a draw from a Poisson distribution parameterised by the driver performance and constructor performance.

$$
\text{points} \sim \text{Poisson}(e^{\text{perf}_{\text{drv}} + \text{perf}_{\text{ctr}}})
$$

Driver performance is simulated as a draw from a normal distribution.

$$
\text{perf}_{\text{drv}} \sim \text{Normal}(\mu_{\text{drv}}, \sigma_{\text{drv}}^2)
$$

Likewise constructor performance is simulated as a draw from a normal distribution.

$$
\text{perf}_{\text{ctr}} \sim \text{Normal}(\mu_{\text{ctr}}, \sigma_{\text{ctr}}^2)
$$

We will therefore have a likelihood function that is the product of the Poisson density of the points for each driver for each race. The number of parameters is very high, as a performance score for each driver and for each constructor.

# Constructor performance

Let's start simpler, with a view of just the constructor performance. Assume that at least one driver for every constructor maximised the car's performance each weekend. THIS ISN'T TRUE. If Albon had a poor weekend, Sargeant wasn't going to step up, as one of many examples on the grid in 2024. However it is a useful approximation that let's us analyse just the constructor performance.

```{r}
#| label: fig-simpler-model
#| fig-cap: Histogram of re-ranked constructor results in F1 2024.
ctr_positions <- f2024 |>
  group_by(round, constructorRef) |>
  summarise(quali_position = min(quali_position), position = min(position)) |>
  mutate(
    # re-rank
    quali_position = rank(quali_position),
    position = rank(position)
  ) |>
  arrange(round, position)

ggplot(ctr_positions) +
  aes(x = position, fill = constructorRef) +
  facet_wrap(~constructorRef) +
  scale_fill_manual(values = ctr_colours$colour) +
  geom_histogram(alpha = 0.5, colour = "black", linewidth = 0.1, binwidth = 1, show.legend = FALSE)
```

A key point here is that we've recalculated positions using only the max driver's position for each constructor, i.e. there are now only 10 finishing positions.

Again we can simulate the position $p$ as a draw from a Poisson distribution, this time where $\lambda_\text{ctr}$ is the performance of the constructor only.

$$
p \sim \text{Poisson}(\lambda_{\text{ctr}})
$$

To keep things simple, let's start with an uninformative prior, a uniform distribution for the performance of the constructors.

$$
\lambda_{ctr} \sim \text{Uniform}(1, 10)
$$

Then our likelihood function is much simpler. (We won't actually need this, but I find it useful to write out for the sake of understanding.)

```{r}
#| label: log-likelihood-2
log_lik_ctr <- function(ctr_positions, ctr_perfs) {
  ctrs <- sort(unique(ctr_positions$constructorRef))
  log_lik <- 1.0
  for (i in 1:length(ctrs)) {
    race_posns <- filter(ctr_positions, constructorRef == ctrs[i])$position
    log_lik <- log_lik + sum(dpois(race_posns, lambda = ctr_perfs[i], log = TRUE))
  }
  log_lik
}
```

Let's throw Stan at this now. Here's our Stan model file.

```
{{< include f1.stan >}}
```

Below the fold is the R code for interacting with it via CmdStanR. I settled on CmdStanR rather than RStan after hitting too many nameless runtime errors through RStan - see [here](/posts/using-stan-from-r/).

```{r}
#| label: run-stan
#| warnings: false
library(cmdstanr, quietly = TRUE)
check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)

ctrs <- sort(unique(ctr_positions$constructorRef))
ctr_index <- tibble(
  constructorId = 1:length(ctrs),
  constructorRef = ctrs,
)

make_data_list <- function(ctr_positions) {
  tidy_ctr_posns <- ctr_positions |> merge(ctr_index)

  data_list <- list(
    n_ctrs = n_distinct(tidy_ctr_posns$constructorId),
    n_obs = nrow(tidy_ctr_posns),
    ctrs = tidy_ctr_posns$constructorId,
    positions = tidy_ctr_posns$position
  )
}

run_stan <- function(data_list, model_file = "f1.stan") {
  mod <- cmdstan_model(model_file, exe_file = str_c(model_file, ".bin"))
  mod$sample(data_list, seed = 42, show_messages = FALSE)
}

fit <- run_stan(make_data_list(ctr_positions))
fit
```

Let's tidy that up though, mapping parameters back to constructor names.

```{r}
#| label: fig-ctr-lambda-posteriors
#| fig-cap: Posterior samples for constructor performance
sample_posterior <- function(fit) {
  df <- fit$draws("lambda", format = "draws_matrix") |> as_tibble()
  colnames(df) <- ctrs
  df |>
    pivot_longer(
      all_of(ctrs),
      names_to = "constructorRef", values_to = "position"
    ) |>
    mutate(position = as.double(position))
}

plot_posterior <- function(fit) {
  means <- sample_posterior(fit) |>
    group_by(constructorRef) |>
    summarise(mu = mean(position))
  ggplot(sample_posterior(fit)) +
    aes(x = position, fill = constructorRef) +
    scale_fill_manual(values = ctr_colours$colour) +
    geom_density(alpha = 0.5, colour = "black", linewidth = 0.1)
}

plot_posterior(fit)
```

On this plot lower x-values are better.

The interesting thing is that this suggests the Red Bull was clearly the third-fastest car. I'm a little suspicious of that, because it claimed a sequence of 1-2s in the first third of the season. Let's take a closer look at that.

The first thing to check is whether my dumb "max driver, 10 positions" model is problematic. Let's look at Red Bull's results.

```{r}
#| label: tbl-red-bull-results
#| tbl-cap: Red Bull's results in F1 2024

f2024 |>
  filter(constructorRef == "red_bull") |>
  select(gp, round, driverRef, position) |>
  pivot_wider(names_from = "driverRef", values_from = "position") |>
  arrange(round) |>
  merge(
    ctr_positions |> filter(constructorRef == "red_bull") |> select(round, position)
  ) |>
  kable()
```

Round three is clearly a mistake: how can Perez' 5th place become the 10th constructor position? Let's work through it again.

```{r}
#| label: tbl-round-3-results
#| tbl-cap: Round 3 results.
f2024 |>
  group_by(round, constructorRef) |>
  summarise(position = min(position)) |>
  mutate(reranked = rank(position)) |>
  filter(round == 3) |>
  kable()
```

`NA` strikes again! Forgot to add the crucial `na.rm` parameter to the min. Right, a do-over.

```{r}
#| label: fig-updated-ctr-positions
#| fig-cap: Constructor position histograms after fixing NA sorting.
#| warning: false
ctr_positions <- f2024 |>
  group_by(round, constructorRef) |>
  summarise(
    # in the event of a double DNF, assign the last position
    quali_position = pmin(min(quali_position, na.rm = TRUE), 10),
    position = pmin(min(position, na.rm = TRUE), 10)
  ) |>
  mutate(
    # re-rank
    quali_position = rank(quali_position),
    position = rank(position)
  ) |>
  arrange(round, position)

ggplot(ctr_positions) +
  aes(x = position, fill = constructorRef) +
  facet_wrap(~constructorRef) +
  scale_fill_manual(values = ctr_colours$colour) +
  geom_histogram(alpha = 0.5, colour = "black", linewidth = 0.1, binwidth = 1, show.legend = FALSE)
```

That looks more like I'd expect. Let's try Stan again.

```{r}
#| label: fig-updated-posterior-samples
#| fig-cap: Posterior samples after fixing NA sorting.
fit <- run_stan(make_data_list(ctr_positions))
plot_posterior(fit)
```

That is more intuitive: Red Bull is now much closer to McLaren and marginally ahead of Ferrari (despite coming third in the constructor's championship). This tells us that yes, Verstappen probably would have won the driver's championship in a McLaren - but contrary to claims, not in a Ferrari, since it wasn't faster than the Red Bull overall.

The three teams that are on top of each other are: Alpine, Haas, and RB. You can also just about discern that the model is less sure about the top teams, since their posteriors are slightly wider.

There's a lot we can improve about this model. The most obvious is that our priors for constructor performance are uniformative, and so our posteriors basically just reflect the data. Can we add some useful information to inform the model?

## More informative priors

What makes some constructors better than others? ~~Adrian Newey~~ Money. Let's reflect this in our priors.

$$
\lambda_{\text{ctr}} \sim \text{Normal}(\text{budget}_\text{ctr}, \sigma)
$$

### Budget data

This is a bit of a secret, so we have to estimate. We do know that the budget cap is 135M USD and it's unlikely that anyone is operating below the cap. We also know that driver and top executive salaries are exempt from the cap. The top teams are spending about 100M USD on their drivers, and prior to the budget cap's implementation likely invested in facilities that they can use for free (like wind tunnels).

With that in mind, I asked GPT-4o to search the web and estimate budgets for the teams. It came back with these results, which I sanity checked against [this Blackbook Motorsport](https://www.blackbookmotorsport.com/content/f1-team-finances-2023-financial-results-revenue-profit-budget-cap/) article.

```{r}
#| label: tbl-ctr-budgets
#| tbl-cap: Constructor budget estimates (USD millions)
budgets <- tribble(
  ~constructorRef, ~budget,
  "red_bull", 400,
  "mercedes", 400,
  "ferrari", 400,
  "mclaren", 250,
  "aston_martin", 250,
  "alpine", 200,
  "rb", 150,
  "haas", 150,
  "williams", 150,
  "sauber", 150
) |>
  mutate(
    norm_budget = 1 - budget / max(budget)
  )
kable(select(budgets, -norm_budget))
```

Let's update our model and run Stan again.

```
{{< include f1.b.stan >}}
```

```{r}
#| label: fig-run-stan-b
#| fig-cap: Posterior samples from the model with budget-based priors.
data_list_b <- make_data_list(ctr_positions)
data_list_b$prior_mus <- 1 + 10 * arrange(budgets, constructorRef)$norm_budget
data_list_b$prior_sd <- 1.5
fit.b <- run_stan(data_list_b, model_file = "f1.b.stan")

plot_posterior(fit.b)
```

This hasn't made much difference. McLaren has eased back towards Red Bull because their budget is smaller. You could say they did a lot better than Red Bull relative to their budget.

```{r}
#| label: tbl-mu-sig-fit-b
#| tbl-cap: Mean and SD from posterior sample.
sp <- sample_posterior(fit.b)
sp |>
  group_by(constructorRef) |>
  summarise(mu = mean(position), sigma = sd(position)) |>
  arrange(mu) |>
  kable(digits = 2)
```

This model suggests there's very little nothing in it between Red Bull and McLaren, though the posterior distribution is wider for the top three teams than the others so there is more uncertainty.

Was budget a bad choice for the prior? Not necessarily: this model of constructor performance incorporates an important factor that isn't clear from the results, but which should affect an objective assessment of which teams are better. Or to put it another way, if I were Max Verstappen I'd still rather be driving the Red Bull than the McLaren next year, because Red Bull's budget suggests a more capable team overall. (Not to mention the increased wind tunnel time that third place in the constructors' gets relative to the winner.)

```{r}
#| label: fig-plot-with-priors
#| fig-cap: Comparison of prior and posterior samples.
plot_posterior_with_prior <- function(ctrs, prior_mus, prior_sd, fit) {
  s_post <- sample_posterior(fit) |> mutate(sample = "posterior")

  ctr_index <- tibble(constructorRef = ctrs, constructorId = 1:length(ctrs))

  s_prior <- prior_mus |>
    lapply(\(mu) rnorm(100000, mu, prior_sd)) |>
    lapply(as_tibble) |>
    imap(\(t, i) mutate(t, constructorId = i, sample = "prior")) |>
    bind_rows() |>
    rename(position = value) |>
    merge(ctr_index)

  df <- bind_rows(s_prior, s_post)

  ggplot(df) +
    aes(x = position, fill = sample) +
    facet_wrap(~constructorRef) +
    geom_density(alpha = 0.5, linewidth = 0.1) +
    scale_x_continuous(breaks = seq(1, 10, by = 2), limits = c(1, 10)) +
    scale_fill_manual(values = c("dodgerblue1", "dodgerblue4"))
}

plot_posterior_with_prior(ctrs, data_list_b$prior_mus, data_list_b$prior_sd, fit.b)
```

Plotting the priors and posteriors together shows how McLaren over-performed and Mercedes continued to underperform.

### Past performance

Another, very easy way to set the priors is to consider the constructors' performance over the previous seasons with the same regulations, in this case 2022 and 2023 (the ground-effect era). This is really easy to do - we would just take a weighted mean of the constructors' finishing positions as mu for our priors, and perhaps set the variance proportional to the difference. Not particularly innovative or interesting though, so let's skip it.

### Car-limited circuits

Long-time F1 fans will know that at some tracks, the cars almost always finish in pairs, e.g. both Ferraris, then both Mercedes, and so on. Somehow at these circuits driver skill makes little difference; we could say the circuits are car-limited rather than driver-limited. That's no fun to watch, but I wonder if it's useful for establishing car performance?

Let's look back at historic race results to see if some circuits are more likely to finish in two-by-two order. We can score this by the median difference in position between finishing drivers.

```{r}
#| label: fig-position-gaps
#| fig-cap: Distribution of finishing position gaps between teammates by circuit, with median line.

circuits2024 <- races |>
  merge(circuits) |>
  filter(year == 2024) |>
  select(circuitRef)

position_gaps <- f1data |>
  filter(year > 2014) |> # hybrid era onwards, to try and keep it relevant to modern F1 car sizes
  merge(circuits2024) |> # circuits from 2024 only
  select(year, round, circuitRef, constructorRef, driverRef, position) |>
  filter(position != "\\N") |> # ignore DNFs
  mutate(position = as.integer(position)) |>
  group_by(year, round, circuitRef, constructorRef) |>
  filter(n() == 2) |> # must be a double finish
  summarise(gap = max(position) - min(position), max_position = max(position)) |>
  group_by(circuitRef) |>
  mutate(median_gap = median(gap))

ggplot(position_gaps) +
  aes(x = gap) +
  facet_wrap(vars(circuitRef)) +
  geom_histogram(fill = "dodgerblue1", alpha = 0.5, colour = "black", linewidth = 0.1, binwidth = 1) +
  geom_vline(mapping = aes(xintercept = median_gap), colour = "dodgerblue4")
```

Perhaps unsurprisingly given that F1 isn't a spec series, the gap between drivers of the same car is usually very low. I went back and forth on whether to discard cars that finished outside the top ten points-paying positions, as this often includes cars that were retired to save expense or were wounded but finished the race well below their potential for the sake of data gathering. In the end I kept them in because we need two-car finishes to calculate the statistics and setting a threshold would mean re-coding all the finish positions.

It turns out to make little difference anyway. The race with the highest probability of teammates finishing in consecutive positions is Suzuka, whether or not you apply a threshold.

```{r}
#| label: tbl-position-gaps-medians
#| tbl-cap: Circuits with highest probability of having teammates finishing together.
rounds2024 <- races |>
  filter(year == 2024) |>
  merge(circuits) |>
  select(circuitRef, round) |>
  rename(round2024 = round)

p_gap_1 <- position_gaps |>
  count(circuitRef, gap) |>
  group_by(circuitRef) |>
  mutate(p_gap = n / sum(n)) |>
  filter(gap == 1) |>
  ungroup() |>
  merge(rounds2024)

p_gap_1 |>
  slice_max(p_gap, n = 10) |>
  kable(digits = 2)
```

How did the cars line up at Suzuka in 2024, noting that this was round 4 of a 24-round championship?

```{r}
#| label: tbl-suzuka-2024
#| tbl-cap: Results for Suzuka 2024 (two-car finishes only)
suzuka2024 <- f1data |>
  filter(year == 2024) |>
  filter(circuitRef == "suzuka") |>
  select(year, round, circuitRef, constructorRef, driverRef, quali_position, position)

suzuka2024 |>
  drop_na() |>
  group_by(constructorRef) |>
  filter(n() == 2) |>
  arrange(position) |>
  kable()
```

The cars are quite well in order here, if you ignore the gulf between Alonso and Stroll. It looks like Suzuka is really a car-limited track. Incidentally, this would suggest that in round 4, McLaren and Mercedes were quite evenly matched.

#### Counter-arguments

Are we _sure_ Suzuka is a car-limited track?

##### Suzuka is a track "drivers love"! Surely it's a more skill-dependent track?

I would have expected so! Suzuka is described as a technical track, with minimal room for error. Perhaps there aren't as many potential lines that a driver could take to distinguish themselves. It's also a good track for overtaking, so any driver that does qualify out of position is able to recover. Or perhaps the reason drivers love it is because they get to drive their cars on the limit: the limit of the car's performance.

Either way, statistically drivers are more likely to end up in pairs in Suzuka than anywhere else.

##### Suzuka was an early round. Perhaps car performance converges over the season?

On the one hand we'd expect to see cars start at different levels but converge throughout the season, as the teams spot innovations on other cars that they can copy. Or secret design documents that they can copy, ahem. On the other hand, constructors in a tight battle would be motivated to develop their cars further - for example in 2022 when Red Bull overhauled an early Ferrari advantage.

As it happens, historically Suzuka has been mid-to-late season, which suggests that being an early round in 2024 isn't the reason for being car-limited.

```{r}
#| label: tbl-suzuka-round-numbers
#| tbl-cap: Suzuka's placement in each season
races |>
  filter(year >= 2014) |>
  group_by(year) |>
  mutate(n_rounds = n_distinct(round)) |>
  ungroup() |>
  merge(circuits) |>
  filter(circuitRef == "suzuka") |>
  select(year, round, n_rounds) |>
  arrange(year, round) |>
  kable()
```

However the fact that it was an early round in 2024 **does** mean that car performance will have changed over the season. Suzuka can only ever be a point-in-time assessment.

##### Are we sure that consecutive finishes aren't indicative of similar driver skill levels?

The top teams can also hire the best drivers, is it not possible that we're still seeing the drivers finishing in skill order? I.e. it's actually driver-limited, but the drivers happen to be mostly paired with similarly-fast drivers. Alonso and Stroll being the clear exception in the 2024 race results.

On the other hand, between 2023 and 2024 there were no line-up changes among the top 5 teams, so we can easily compare across the two years.

```{r}
#| label: tbl-suzuka-2023
#| tbl-cap: Results for Suzuka 2024 (two-car finishes only)
suzuka2023 <- f1data |>
  filter(year == 2023) |>
  filter(circuitRef == "suzuka") |>
  select(year, round, circuitRef, constructorRef, driverRef, quali_position, position)

suzuka2023 |>
  drop_na() |>
  group_by(constructorRef) |>
  filter(n() == 2) |>
  arrange(position) |>
  kable()
```

The order of constructors is very different, despite all drivers being the same except for Alpha Tauri/RB. Just for fun, here's a side-by-side comparison for each driver for 2023 and 2024.

```{r}
#| label: tbl-drivers-suzuka-2023-2024
#| tbl-cap: Drivers' results for Suzuka in 2023 and 2024
s24 <- suzuka2024 |>
  select(constructorRef, driverRef, position) |>
  rename(position2024 = position)

s23 <- suzuka2023 |>
  # correct to the new names for joining
  # (yes I could have used constructorId, but opaque IDs are so tedious to handle)
  mutate(constructorRef = ifelse(constructorRef == "alphatauri", "rb", constructorRef)) |>
  mutate(constructorRef = ifelse(constructorRef == "alfa", "sauber", constructorRef)) |>
  select(constructorRef, driverRef, position) |>
  rename(position2023 = position)

merge(s23, s24, all = TRUE) |>
  arrange(position2023) |>
  kable()
```

##### Don't certain tracks favour certain cars (e.g. due to having fewer slow corners)?

This is a valid objection. We can only really say that this reflects car performance at tracks like Suzuka. Suzuka is a high-speed, high-downforce track with more high-speed than low-speed corners. You can kind of tell by looking that only corners 2, 9, 11, and 14 are slow.

![Suzuka Circuit Layout](./suzuka.jpg)

_Data and image from [the F1 Formbook](https://thef1formbook.wordpress.com/2016/10/06/suzuka-circuit-guide-2016/)._

So perhaps another way of looking at it is that low-speed corners are where drivers make the most difference. That aligns with the excellent [recent analysis by Mark Hughes](https://www.the-race.com/formula-1/ferrari-f1-car-traits-lewis-hamilton-driving-style/) where he explains how drivers like Leclerc and Hamilton make up their time in slow corners.

Naturally certain cars will also be better at slow corners, and that's not represented at Suzuka. We might be able to gain a better understanding with sector times, but sadly I don't have this data.

### Suzuka-based priors

At this point I'm convinced enough that Suzuka is a useful indicator of relative car performance to be a prior, so let's take the position of each team's fastest car round Suzuka as constructor performance priors. Luckily there weren't any double-DNFs - at least one car from each team finished - so every team is represented.

The Stan model is the same, we're just injecting different prior mus and SDs.

```{r}
#| label: fig-suzuka-posterior
#| fig-cap: Posterior samples for the Suzuka-position priors.

suzuka_positions <- suzuka2024 |>
  drop_na() |>
  group_by(constructorRef) |>
  summarise(position = min(position)) |>
  mutate(position = rank(position)) |>
  arrange(constructorRef)

data_list_suzuka <- make_data_list(ctr_positions)
data_list_suzuka$prior_mus <- suzuka_positions$position
data_list_suzuka$prior_sd <- 1

fit_suzuka <- run_stan(data_list_suzuka, "f1.b.stan")

plot_posterior(fit_suzuka)
```

It's not dramatically different. It shouldn't be, the model and data are the same and the priors are very similar to the budget-based priors - the fun was in figuring out that Suzuka is car-limited.

```{r}
#| label: fig-suzuka-posterior-with-prior
#| fig-cap: Posterior samples alongside the Suzuka-position priors.
plot_posterior_with_prior(ctrs, data_list_suzuka$prior_mus, data_list_suzuka$prior_sd, fit_suzuka)
```

Most teams didn't move far from their priors. I'd draw similar conclusions to before: the McLaren was fastest, Red Bull was a close second, and Ferrari were not far behind.

```{r}
#| label: tbl-mu-sig-fit-suzuka
#| tbl-cap: Mean and SD from posterior sample, with Suzuka priors.
sp <- sample_posterior(fit_suzuka)
sp |>
  group_by(constructorRef) |>
  summarise(mu = mean(position), sigma = sd(position)) |>
  arrange(mu) |>
  kable(digits = 2)
```

# Reintroducing driver skill

Simple model achieved, let's push on to something more complex i.e. the originally described model. Here it is:

```
{{< include f1.c.stan >}}
```

There is a crucial change. To ensure the model is identifiable, the raw skill parameters are constrained to [0, 1] with an inverse logistic transform. The transformed parameters are then summed and exponented to get the lambda for the Poisson distribution.

```{r}
#| label: run-drv-ctr-model
run_stan2 <- function(data_list, model_file = "f1.c.stan") {
  mod <- cmdstan_model(model_file, exe_file = str_c(model_file, ".bin"))
  mod$sample(data_list, seed = 42, show_messages = FALSE, parallel_chains = 8)
}

ctrs <- sort(unique(f2024$constructorRef))
drvs <- sort(unique(f2024$driverRef))

ctr_index <- tibble(constructorRef = ctrs, ctr_idx = 1:n_distinct(ctrs))
drv_index <- tibble(driverRef = drvs, drv_idx = 1:n_distinct(drvs))

ctr_drv_positions <- f2024 |>
  select(constructorRef, driverRef, position) |>
  arrange(constructorRef, driverRef) |>
  merge(ctr_index) |>
  merge(drv_index) |>
  drop_na()

sample_posterior2 <- function(fit) {
  ctrs <- sort(unique(ctr_drv_positions$constructorRef))
  drvs <- sort(unique(ctr_drv_positions$driverRef))
  df_ctrs <- fit$draws("lambda_ctrs", format = "draws_matrix") |> as_tibble()
  colnames(df_ctrs) <- ctrs

  df_drvs <- fit$draws("lambda_drvs", format = "draws_matrix") |> as_tibble()
  colnames(df_drvs) <- drvs

  list(
    ctrs = df_ctrs |>
      pivot_longer(
        all_of(ctrs),
        names_to = "constructorRef", values_to = "performance"
      ) |>
      mutate(performance = as.double(performance)),
    drvs = df_drvs |>
      pivot_longer(
        all_of(drvs),
        names_to = "driverRef", values_to = "performance"
      ) |>
      mutate(performance = as.double(performance))
  )
}

fit.c <- run_stan2(
  list(
    n_ctrs = n_distinct(ctrs),
    n_drvs = n_distinct(drvs),
    n_obs = nrow(ctr_drv_positions),
    ctr_mus = 0.2 * (-5 + suzuka_positions$position), # shift to centre on 0
    ctr_sd = 0.67, # picked a wide SD because car performance evolved over the season
    positions = ctr_drv_positions$position,
    position_indices = ctr_drv_positions |> select(ctr_idx, drv_idx) |> as.matrix()
  )
)
```

Let's first have a look at the constructor performance as determined by the model.

```{r}
#| label: fig-ctr-perf
#| fig-cap: Constructor performance parameters determined by model. Lower (left) is better.
posterior_ctrs <- sample_posterior2(fit.c)$ctrs

ggplot(posterior_ctrs) +
  aes(x = performance, fill = constructorRef) +
  # facet_wrap(~constructorRef) +
  scale_fill_manual(values = ctr_colours$colour) +
  geom_density(alpha = 0.5, colour = "black", linewidth = 0.2, show.legend = TRUE)
```

```{r}
#| label: tbl-ctr-perf
#| tbl-cap: Constructor performance means and SDs from the posterior.

posterior_ctrs |>
  group_by(constructorRef) |>
  summarise(mean_performance = mean(performance), sd = sd(performance)) |>
  arrange(mean_performance) |>
  mutate(rank = rank(mean_performance)) |>
  kable(digits = 2)
```

Note that the sampled parameter is now latent performance not positions, so the numbers don't have a real-world meaning. What matters is relative performance, where a lower number is better.

The model suggests - controversially, but with appropriate uncertainty - that the Red Bull was the fastest car, followed by Ferrari and _then_ the McLaren. However the relative positioning of the other teams seems about right.

Forgive me for not labelling all the drivers on this next plot, but there's only so much plot fiddling I'm willing to do and it's usually obvious which is which.

```{r}
#| label: fig-drv-perf
#| fig-cap: Driver performance parameters determined by model. Lower (left) is better.
posterior_drvs <- sample_posterior2(fit.c)$drvs |> #|
  merge(ctr_drvs) |>
  group_by(driverRef) |>
  mutate(x = mean(performance))

ggplot(posterior_drvs) +
  aes(x = performance, fill = driverRef, label = driverRef) +
  facet_wrap(~constructorRef) +
  scale_fill_manual(values = drv_colours$colour) +
  geom_density(alpha = 0.5, colour = "black", linewidth = 0.2, show.legend = FALSE) +
  geom_text(data = posterior_drvs, mapping = aes(x = x, y = 0.75, angle = 90), check_overlap = TRUE)
```

```{r}
#| label: tbl-drv-perf
#| tbl-cap: Driver performance means and SDs from the posterior.

posterior_drvs |>
  group_by(driverRef) |>
  summarise(mean_performance = mean(performance), sd = sd(performance)) |>
  arrange(mean_performance) |>
  mutate(rank = rank(mean_performance)) |>
  kable(digits = 2)
```

The model suggests that the top drivers performed similarly, with Verstappen fastest. Poor Perez comes dead last, because the model has decided that the Red Bull was the fastest car.

There are some obvious issues though. Alonso is considered only the 15th best performer out of 24, which is absurd. This could be because the Suzuka prior placed Aston Martin ahead of Mercedes whereas they actually finished the season well behind.

There will also be some effect from the way I've simply excluded DNFs rather than penalising driver-fault DNFs.

More on this later.
